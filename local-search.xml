<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/10/28/hello-world/"/>
    <url>/2025/10/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2025/10/24/python%E7%9A%84%E8%BF%9B%E9%98%B6(%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0)/"/>
    <url>/2025/10/24/python%E7%9A%84%E8%BF%9B%E9%98%B6(%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="初识对象"><a href="#初识对象" class="headerlink" title="初识对象"></a>初识对象</h1><p>不管在生活中还是程序中都需要提一个概念，那就是数据的组织，组织数据可以减少数据的混乱程度，提高效率，在生活中我们组织顺序可能是设计表格，生产表格，填写表格，<strong>在程序中其形式可能是设计类，创建对象，对象属性赋值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    name = <span class="hljs-literal">None</span><br>    gender = <span class="hljs-literal">None</span><br>    nationality = <span class="hljs-literal">None</span><br>    age = <span class="hljs-literal">None</span><br><span class="hljs-comment">#创建一个类</span><br>su = student()<span class="hljs-comment">#创建对象</span><br><span class="hljs-comment">#给对象的属性赋值</span><br>su.name = <span class="hljs-string">&quot;小明&quot;</span><br>su.gender = <span class="hljs-string">&quot;男&quot;</span><br>su.nationality = <span class="hljs-string">&quot;中国&quot;</span><br>su.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(su.name)<br><span class="hljs-built_in">print</span>(su.gender)<br><span class="hljs-built_in">print</span>(su.nationality)<br><span class="hljs-built_in">print</span>(su.age)<br></code></pre></td></tr></table></figure><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>在上一节中我们利用类去封装属性，并基于类创建一个对象来使用<br>类的使用语法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类的名称</span>:<br>    类的属性（成员变量<br>    类的方法（成员方法<br>对象 = 类名() 创建类对象<br></code></pre></td></tr></table></figure><p>类中有两类，一类是属性，一类是方法<br>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    name = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hi</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;大家好，我是<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span>)<br>su = student()<br>su.name = <span class="hljs-string">&quot;小明&quot;</span><br>su.say_hi()<br></code></pre></td></tr></table></figure><p>不难看出，类中不仅可以定义属性用来记录数据，也可以定义函数，用来记录行为<br>类中定义的属性（变量），我们称之为成员变量，类中定义的函数，我们称之为成员方法<br>self 是python中类中函数的默认参数，表示当前对象，在类中可以通过self.属性名来访问当前对象的属性<br>关于self是需要注意的<br>1.它用来表示类对象自身的意思<br>2.当我们使用类对象调用方法的是，self会自动被python传入<br>3.在方法内部想要访问类的成员参数，必须使用self<br><strong>self尽管在列表参数中，但是传参时可以忽略,想要访问类的成员参数，必须使用slf这个参数</strong></p><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>基于类创建对象的语法为：对象名 &#x3D; 类名称名()<br>在这里思考一个问题 为什么非要创建对象才能使用呢？<br>类只是程序内部的设计图纸，对象是图纸生产实体（对象），才能正常工作，这种套路，称之为面向对象编程</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>在前面，我们在定义成员变量时，都是一个一个的定义，其实可以想函数那样一次性定义多个成员变量，这就是构造方法<br>在类中，有一个特殊的方法，叫做构造方法，构造方法的名称是**<strong>init</strong>** 其有两大特性</p><ul><li>在创建类对象时，会<strong>自动执行</strong></li><li>在构造类对象的收，将传入参数自动传递给__init__方法<br><strong>其实构造函数时可以省略前面的定义变量，只需要在__init__方法中定义变量即可</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    name = <span class="hljs-literal">None</span><br>    gender = <span class="hljs-literal">None</span><br>    nationality = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,gender,nationality</span>):<span class="hljs-comment">#可以不写上面的定义，在__init__方法中定义也是完全可以的</span><br>        <span class="hljs-variable language_">self</span>.name = name<span class="hljs-comment">#这里的顺序有讲究，name是__init__方法获取得到的，赋值给self.name，方法内部的self.name是类中定义的属性</span><br>        <span class="hljs-variable language_">self</span>.gender = gender<br>        <span class="hljs-variable language_">self</span>.nationality = nationality<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建了一个类对象&quot;</span>)<br>su = student(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;中国&quot;</span>)<br><span class="hljs-built_in">print</span>(su.name)<br></code></pre></td></tr></table></figure>利用for循环和类创建一个录入系统<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,score</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>        <span class="hljs-variable language_">self</span>.score = score<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span> (<span class="hljs-variable language_">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;当前同学为Name: <span class="hljs-subst">&#123;self.name&#125;</span>, Age: <span class="hljs-subst">&#123;self.age&#125;</span>, Score: <span class="hljs-subst">&#123;self.score&#125;</span>&quot;</span>)<br>students = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入姓名:&quot;</span>)<br>    age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入年龄:&quot;</span>)<br>    score = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入分数:&quot;</span>)<br>    s = student(name,age,score)<br>    students.append(s)<br>    s.show()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;所有学生信息:&quot;</span>)<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> students:<br>    s.show()<br></code></pre></td></tr></table></figure></li></ul><h4 id="其他内置方法"><a href="#其他内置方法" class="headerlink" title="其他内置方法"></a>其他内置方法</h4><p>上文学习到的__init__方法是构造方法，还有其他的内置方法,他们都叫做魔术方法，例如__str__字符串方法,__lt__小于大于符号比较,__le__小于等于大于等于符号比较,__eq__符号比较</p><ol><li><strong>str</strong></li></ol><ul><li>在打印对象时，会自动调用__str__方法，并将返回值打印出来，<strong>控制类转换为字符串的行为</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,score</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>        <span class="hljs-variable language_">self</span>.score = score<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;当前同学为Name: <span class="hljs-subst">&#123;self.name&#125;</span>, Age: <span class="hljs-subst">&#123;self.age&#125;</span>, Score: <span class="hljs-subst">&#123;self.score&#125;</span>&quot;</span><br>s = student(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">90</span>)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure>如果没有__str__方法，则打印对象时，会打印出对象的内存地址，如果有__str__方法，则打印对象时，会调用__str__方法，并将返回值打印出来</li></ul><ol start="2"><li><strong>init</strong></li></ol><ul><li>在比较两个对象时，如果没有提前定义比较方法，则会报错，如果定义了__lt__方法，则会调用__lt__方法，并将返回值打印出来<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,score</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>        <span class="hljs-variable language_">self</span>.score = score<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lt__</span>(<span class="hljs-params">self,other</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.score &lt; other.score<br>s1 = student(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">90</span>)<br>s2 = student(<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">90</span>)<br><span class="hljs-built_in">print</span>(s1 &lt; s2)<br></code></pre></td></tr></table></figure>lt支持大于小于，但是不支持，但是le支持大于等于小于等于，<br>2主要用于大于等于或者小于等于的判断</li></ul><ol start="2"><li><strong>le</strong><br>与init方法类似，le支持大于等于或者小于等于的判断</li><li><strong>eq</strong><br>eq方法主要是判断两个对象是否相等，判断细节自定义，只要返回值为True或者False即可，传入参数与__init__方法相同，都代写为other<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,score</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>        <span class="hljs-variable language_">self</span>.score = score<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self,other</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.score == other.score<br>s1 = student(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">90</span>)<br>s2 = student(<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">90</span>)<br><span class="hljs-built_in">print</span>(s1 == s2)<br></code></pre></td></tr></table></figure></li></ol><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><p>面向对象，是许多编程语言都支持的一种编程思想，可以简单理解为基于模板（类）去创建实体（对象），使用对象完成功能开发<br><strong>面向对象的三大特性</strong></p><ul><li>封装</li><li>继承</li><li>多态<br>封装表示的是将现实世界中的事物的<strong>属性****行为</strong>封装到类中描述为<strong>成员变量，成员方法</strong>，从而完成程序对现实世界的描述<br>私有成员和公有成员<br>既然现实事物有不公开的属性和行为，那么作为现实事物在程序中映射的类，也应该支持。 具体的体现就是私有成员和公有成员<br><strong>定义私有成员和变量非常简单，只需要在成员变量或者成员方法前加上__两个下划线即可，例如__name</strong> 类对象是无法使用私有成员和方法的 但是类内部是可以正常使用的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;小明&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">all_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.__name()<br>su = student()<br>su.all_name()<br></code></pre></td></tr></table></figure>私有成员的定义我们已经了解了其主要意义提供内部使用的属性和方法，而不对外开放</li></ul><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><p>在一般情况下，每定义一个类都需要重新写具体的功能，但是继承可以帮我们在面对类似的功能时，可以直接使用父类中的功能，减少代码的重复<br>继承的语法如下，严格意义上讲下列的写法叫做单继承<br>class 类名(父类名):<br>    类体<br>在类中，可以通过super()来调用父类中的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">new</span>:<br>    readhistrory = <span class="hljs-string">&quot;中国&quot;</span><br>    age = <span class="hljs-number">19</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>(<span class="hljs-title class_ inherited__">new</span>):<br>    new = <span class="hljs-number">99</span><br>a = student()<br><span class="hljs-built_in">print</span>(a.readhistrory)<br></code></pre></td></tr></table></figure><p>多继承，顾名思义就是一个类可以继承多个类，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">new</span>:<br>    readhistrory = <span class="hljs-string">&quot;中国&quot;</span><br>    age = <span class="hljs-number">19</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>():<br>    live = <span class="hljs-string">&quot;北京&quot;</span><br>    hight = <span class="hljs-number">188</span>   <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>(new,student):<br>    bb = <span class="hljs-number">99</span><br>a = student()<br><span class="hljs-built_in">print</span>(a.readhistrory)<br></code></pre></td></tr></table></figure><p>如果继承父类中有名字相同的成员，那么默认以继承顺序（从左到右）为优先级，即先继承的保留，后继承的被覆盖<br>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">new</span>:<br>    age = <span class="hljs-number">19</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>():<br>    age = <span class="hljs-number">18</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">su</span>(new,student):<br>    <span class="hljs-keyword">pass</span><br>a = su()<br><span class="hljs-built_in">print</span>(a.age)<br></code></pre></td></tr></table></figure><p>应该是优先继承new中的age，而不是student中的age<br>在上面写的类中有写到pass。pass只是单纯的占位符，没有实际意义，只是保证类的完整性<br><strong>复写</strong><br><strong>子类继承父类的成员属性和成员方法后，如果对其不满意，那么可以进行复写，即在子类中重新定义同名的属性和方法即可</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">phone</span>:<br>    IEMEL = NONE<br>    producer = <span class="hljs-string">&quot;ITCAST&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call_by_5g</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;5g打电话&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">new_phone</span>(<span class="hljs-title class_ inherited__">phone</span>):<br>    proucer = <span class="hljs-string">&quot;ITHEIMA&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call_by_5g</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子类的5g打电话&quot;</span>)<br></code></pre></td></tr></table></figure><p>调用父类同名成员，一旦复写了父类成员，那么类对象调用成员的时候，就会优先调用复写后的新成员，如果需要使用被复写的父类成员<br>方法一：调用父类成员<br>使用成员变量：父类名.成员变量<br>使用成员方法：父类名.成员方法(self)<br>方法二：使用super()<br>使用成员变量：super().成员变量<br>使用成员方法：super().成员方法(self)</p><h6 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h6><p>关于类型注解 本小节从三个部分出发</p><ul><li>变量的类型注解</li><li>函数（方法）的参数注解</li><li>union类型<br>在前面学列表时，如果list已经定义，那么输入</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python的进阶(第十章)</title>
    <link href="/2025/10/21/python%E7%9A%84%E8%BF%9B%E9%98%B6(%E7%AC%AC%E5%8D%81%E7%AB%A0)/"/>
    <url>/2025/10/21/python%E7%9A%84%E8%BF%9B%E9%98%B6(%E7%AC%AC%E5%8D%81%E7%AB%A0)/</url>
    
    <content type="html"><![CDATA[<p>本章节主要是回顾前面所学到的数据，并对接下来的学习做准备</p><h1 id="json数据格式的转换"><a href="#json数据格式的转换" class="headerlink" title="json数据格式的转换"></a>json数据格式的转换</h1><ol><li>什么是json</li></ol><ul><li>json是一种轻量级的数据交换格式，可以按照json指定的格式去组织和封装数据,<strong>本质上来说json就一个拥有特定格式的字符串</strong></li><li>json本质上是一个带有特定格式的字符串<br>主要作用是 json是一种在各个编程语言中流通的数据格式，负责不同编程语言中的数据交换类似于</li><li>国际通用语言</li><li>中国56个民族不同地区所使用的通用语言–普通话<br>各种编程语言存储数据的容器不尽相同，在python中有字典dict这样的数据类型，而其他语言没有其他对应的字典<br>为了让不同的语言都能够通信，json就是一个很好的中转<br>json对于python来说，就是一个字典或者列表，但是对于其他语言来说，就是一个对象<br>语法如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>date = [(<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>), (<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>)]<br>date = json.dumps(date)<span class="hljs-comment">#将列表转换为json格式的字符串</span><br>date = json.loads(date)<span class="hljs-comment">#将json格式的字符串转换为列表</span><br></code></pre></td></tr></table></figure>如果写入的数据中有中文，则需要指定ensure_ascii&#x3D;False（例如json.dumps(date, ensure_ascii&#x3D;False)）否则中文显示会不正常,意义为不使用ascii编码，直接输出</li></ul><h2 id="pyecharts"><a href="#pyecharts" class="headerlink" title="pyecharts"></a>pyecharts</h2><p>前面说过本章的学习主要是为了回顾之前的学过的内容，所以本章节主要学习pyecharts这个库，pyecharts是一个python的可视化库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Line<br>line = Line()<br>line.add_xaxis([<span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tue&quot;</span>])<br>line.add_yaxis(<span class="hljs-string">&quot;CNY&quot;</span>, [<span class="hljs-number">150</span>, <span class="hljs-number">230</span>])<br>line.render()<br>line.set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;Line-基本示例&quot;</span>))<br></code></pre></td></tr></table></figure><p>对于pyecharts模块中有很多配置选项，常用的有两个类别</p><ul><li>全局配置选项 即针对整个图像的设置，例如x,y轴的数据 用set_global_opts方法来配置</li><li>系列配置选项 即针对每个系列的设置，例如每个系列的颜色，图形形状，图形大小，图形位置等</li><li>系列配置选项 set_global_opts方法来配置，例如标题，图例配置，工具箱配置项，工具箱配置项，视觉映射项，提示框配置项</li></ul><h3 id="数据的准备"><a href="#数据的准备" class="headerlink" title="数据的准备"></a>数据的准备</h3><p>json很很重要<br>json数据的整理我没有具体的文档没法实操，但是里面有很多概念值得留意<br>切片[开始:结束:步长]，我看到老师的用法可以是[:-2]，可以表示从头开始，到倒数第二个结束，步长为1，值得留意</p><h4 id="创建折线图"><a href="#创建折线图" class="headerlink" title="创建折线图"></a>创建折线图</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python的开始(第九章) 异常，模块与包</title>
    <link href="/2025/10/18/python%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E4%B9%9D%E7%AB%A0)/"/>
    <url>/2025/10/18/python%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E4%B9%9D%E7%AB%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="了解异常"><a href="#了解异常" class="headerlink" title="了解异常"></a>了解异常</h1><p>异常是程序在运行过程中发生的错误，它会导致程序的运行中断，并提示错误信息</p><h2 id="捕捉异常"><a href="#捕捉异常" class="headerlink" title="捕捉异常"></a>捕捉异常</h2><p>当我们程序运行中遇到了bug要么是直接停止，<strong>要么是对bug进行适当的提醒，并继续运行</strong><br>捕获异常的作用在于提前假设某处可能会发生异常，当异常真的发生时可以有后续手段<br>基本语法为<br>try:<br>    可能会发生异常的代码<br>except:<br>    异常发生时执行的代码<br>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>)<br></code></pre></td></tr></table></figure><p>如上捕获全部异常，<strong>except:和 except Exception:是等价的</strong></p><h2 id="捕捉指定异常"><a href="#捕捉指定异常" class="headerlink" title="捕捉指定异常"></a>捕捉指定异常</h2><p>捕获指定异常，即除这个指定异常以外的异常不执行提前写好的异常处理代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError <span class="hljs-keyword">as</span> e:<span class="hljs-comment">#这里的e是异常对象，可以通过e.args获取异常的详细信息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>)<br>    <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>捕获多种异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-keyword">except</span> (FileNotFoundError, IOError) <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>)<br>    <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>如果出现如上两种一场都会执行except中的代码<br>如果需要在捕获异常后继续执行代码，可以使用else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-keyword">except</span> (FileNotFoundError, IOError) <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>)<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">else</span>:<span class="hljs-comment">#如果没有异常，则执行else中的代码</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件存在&quot;</span>)<br></code></pre></td></tr></table></figure><p>在try中finally中写的代码无论是否有异常都会执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-keyword">except</span> (FileNotFoundError, IOError) <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>)<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">else</span>:<span class="hljs-comment">#如果没有异常，则执行else中的代码</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件存在&quot;</span>)<br><span class="hljs-keyword">finally</span>:<br>    f.close()<br></code></pre></td></tr></table></figure><h3 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h3><p>异常是具有传递性的，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始执行&quot;</span>)<br>    num = <span class="hljs-number">1</span>/<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>    func()<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>:<br>    <span class="hljs-keyword">try</span>:<br>        func2()<br>    <span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;捕获异常&quot;</span>)<br>        <span class="hljs-built_in">print</span>(e)<br>main()<br></code></pre></td></tr></table></figure><p>在main函数中捕获异常，在func2函数中调用func函数，在func函数中出现异常，则会被main函数捕获</p><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>模块是python中的一种组织代码的方式，同时也是一个普通以.py结尾的文件，模块可以包含函数，类，变量等<br>模块的作用：python中有很多各种不同的模块，每一个模块都可以帮助我们快速的实现一些功能，比如实现和时间相关的功能，可以直接导入time模块，然后使用time模块中的函数，我们可以认为模块就是一个工具包<br>大白话就是模块就是一个python文件，里面有类，函数，变量等，我们可以直接拿过来用<br>模块在使用前需要先导入，导入的语法为<br><strong>[from 模块名] import [模块 | 类 | 函数 | 变量] [as 别名]</strong><br>常用组合为下<br>import 模块名<br>from 模块名 import 模块 | 类 | 函数 | 变量<br>from 模块名 import *<br>import 模块名 as 别名<br>from 模块名 import 模块 | 类 | 函数 | 变量 as 别名<br>如果用import * 导入模块中的所有内容，则需要注意，如果模块中有和内置函数重名的函数，则会被覆盖,且每次使用时需要加上模块名比如time.sleep()<br>但是如果使用from 模块名 import * 则不会覆盖内置函数，且可以直接使用函数名，如sleep()<br>如果导入的模块名字非常长 可以使用as 别名来简化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time <span class="hljs-keyword">as</span> t<br>t.sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h5 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h5><p>与导入内置模块不同，自定义模块需要自己创建，然后在需要使用的文件中导入<br>如果导入相同名字的模块名，且功能不一，根据写入顺序，后面的会覆盖掉前面的<br><strong>x需要注意的是如果在一个文件中导入了模块，其实是会执行一遍模块中的代码的，如果模块中有print，则会打印一遍</strong></p><ol><li><strong>name</strong><br>遇到这种情况时候，可以使用if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“来判断是否是直接执行的文件，如果是直接执行的文件，则执行if中的代码，如果不是直接执行的文件，则不执行if中的代码，<strong>name__是python中一个特殊的变量，它表示当前模块的名字，如果当前模块是被其他模块导入的，则__name__的值是导入模块的名字，如果当前模块是直接执行的，则__name__的值是__main</strong></li><li><strong>all</strong><br>如果需要导入模块中的所有内容，可以使用__all__来指定需要导入的内容，__all__是一个列表，列表中的元素是需要导入的内容，如果不指定__all__，则默认导入模块中的所有内容<br>在__all__列表内指定函数，默认导入时会导入，如果不指定，则不会导入</li></ol><h5 id="python包"><a href="#python包" class="headerlink" title="python包"></a>python包</h5><p>从物理上看，包就是一个文件夹，在文件夹下<strong>包含了一个__init__.py文件</strong>，在文件夹内部可用于包含多个模块文件，从逻辑上看，包的本质依然是模块，只是模块的集合<br>包的作用是在于当我们的模块文件越来越多时，包可以帮我们管理模块，包的的作用就是包含多个模块，但包的本质上依然是模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_package.my_module<br>my_package.my_module.func()<span class="hljs-comment">#如果导入时使用包名.模块名形式导入时，那么在引用时需使用包名.模块名.函数名</span><br><span class="hljs-keyword">from</span> my_package <span class="hljs-keyword">import</span> my_module<br>my_module.func()<span class="hljs-comment">#如果使用from 包名 import 模块名导入时，那么在引用时可以直接使用模块名.函数名</span><br><br></code></pre></td></tr></table></figure><p>需要注意的是，必须在__init__.py中指定需要导入的模块，否则无法导入,(只针对于from 包名 import *,import xxx无效)，如果手动导入则不会受到影响</p><h6 id="第三方包"><a href="#第三方包" class="headerlink" title="第三方包"></a>第三方包</h6><p>我们知道包可以包含一堆的python模块，而每个模块又包含很多功能，所以我们认为，一个包就是一堆同类型功能的集合体<br>第三方包的安装非常简单，只需要在命令行中使用pip install 包名即可安装，安装完成后，我们就可以在程序中使用了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python的进阶(第七章)</title>
    <link href="/2025/10/17/python%E7%9A%84%E8%BF%9B%E9%98%B6(%E7%AC%AC%E4%B8%83%E7%AB%A0)/"/>
    <url>/2025/10/17/python%E7%9A%84%E8%BF%9B%E9%98%B6(%E7%AC%AC%E4%B8%83%E7%AB%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="函数的多返回值"><a href="#函数的多返回值" class="headerlink" title="函数的多返回值"></a>函数的多返回值</h1><p>在前面提到过，在一个函数中如果执行了一个return语句，那么函数就会立即结束，并不会执行后续的代码，这是否意味着函数只能返回一个值呢？实际上，Python允许函数返回多个值。我们可以通过在return语句中返回一个元组来实现这一点。<br><strong>这里有一个解包的思想：元组内的元素可以赋值给外部的变量，但元组内的元素个数必须与外部的变量个数一致，否则会报错。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>c,d = x<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_student_info</span>():<br>    name = <span class="hljs-string">&quot;小明&quot;</span><br>    age = <span class="hljs-number">18</span><br>    <span class="hljs-keyword">return</span> (name, age)<span class="hljs-comment">#返回一个元组</span><br>x, y = get_student_info()<span class="hljs-comment">#解包一个元组</span><br><span class="hljs-built_in">print</span>(x, y)<br></code></pre></td></tr></table></figure><p>也可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_student_info</span>():<br>    name = <span class="hljs-string">&quot;小明&quot;</span><br>    age = <span class="hljs-number">18</span><br>    <span class="hljs-keyword">return</span> name, age<br>result_name, result_age = get_student_info()<br><span class="hljs-built_in">print</span>(result_name, result_age)<br></code></pre></td></tr></table></figure><h2 id="函数的多种传参方式"><a href="#函数的多种传参方式" class="headerlink" title="函数的多种传参方式"></a>函数的多种传参方式</h2><p>在使用方式上，Python支持多种传参方式，包括：</p><ul><li>位置参数</li><li>关键字参数</li><li>缺省参数</li><li>不定长参数<br>位置参数：调用函数时根据函数定义的参数位置来传递参数，这种方式是最常见的传参方式。<br>例如<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br>result = add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><strong>注意：传递参数的顺序及个数必须与函数定义的参数一致。</strong><br>关键字参数：函数调用时通过 <strong>键 &#x3D; 值</strong> 形式来传参的<br>作用：可以不考虑参数的顺序，<strong>使函数调用更加清晰易用。</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br>result = add(b=<span class="hljs-number">5</span>, a=<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>其实位置参数和关键字参数可以混用，但是需要注意的是，<strong>位置参数必须在关键字参数之前，而且是对应的</strong><br>缺省参数<br>作用：<strong>在定义函数时，可以给参数设置一个默认值，当调用函数时，如果没有传递对应的参数，则使用默认值</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b=<span class="hljs-number">10</span></span>):<br>    <span class="hljs-keyword">return</span> a + b<br>result = add(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>需要注意设置默认值的时候，默认值必须在所有参数的后面，否则会报错<br>不定长参数<br>不定长参数也叫可变参数，用于不确定调用的时候会传递多少个参数(不传参也可以)的场景<br>作用：<strong>在定义函数时，可以使用*args来定义一个不定长参数，调用函数时可以传递任意个数的参数</strong><br>不定长也分为两种</li><li>不定长位置参数<br>在这里定义了*args，传进的所有参数都会被args变量接受，他会根据传进参数的位置合并为一个元组，args是元组类型，这就是位置传递<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*args</span>):<br>    <span class="hljs-built_in">print</span>(args)<br>result = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure></li><li>不定长关键字参数<br>在这里定义了**kwargs，传进的所有参数都会被kwargs变量接受，他会根据传进参数的键值对合并为一个字典，kwargs是字典类型，这就是关键字传递<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-built_in">print</span>(kwargs)<br>result = add(a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>, c=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure>其输出结果是{‘a’: 1, ‘b’: 2, ‘c’: 3}</li></ul><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>函数作为参数传递<br>在前面的学习中，我们一直使用的函数，都是接受数据作为参数传入</p><ul><li>数字</li><li>字符串</li><li>字典，列表，元组等<br>其实我们学习的函数本身也可以作为参数传递到另一个参数内<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">computer</span>):<br>    result = computer(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(result)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_computer</span>(<span class="hljs-params">a, b</span>):<br>     <span class="hljs-keyword">return</span> a + b<br>add(add_computer)<br></code></pre></td></tr></table></figure>所以这是一种计算逻辑的传递，而非数据的传递<br>就像上述代码那样，不仅仅是相加，相减，相乘，相除，都可以作为参数传递到另一个参数内</li></ul><h4 id="匿名函数lambda"><a href="#匿名函数lambda" class="headerlink" title="匿名函数lambda"></a>匿名函数lambda</h4><p>函数的定义</p><ul><li>def关键字，可以定义带有名称的函数</li><li>lambda关键字，可以定义匿名函数（无名称）<br>带有名称的函数可以重复使用，而匿名函数只能使用一次<br>语法为<br><strong>lambda 参数1: 函数体（一行代码）</strong><br>传入参数表示匿名函数的形式参数，如x,y表示接收2个形式参数，函数体就是函数的执行逻辑<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">a</span>):<br>    result = a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(result)<br>function(<span class="hljs-keyword">lambda</span> x, y: x + y)<br><span class="hljs-comment">#其本质还是函数作为参数传递，这里可以理解为匿名函数作为a的赋值传入函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function2</span>(<span class="hljs-params">a</span>):<br>    result = a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(result)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br>function2(a)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python的进阶(第八章)</title>
    <link href="/2025/10/15/python%E7%9A%84%E8%BF%9B%E9%98%B6(%E7%AC%AC%E5%85%AB%E7%AB%A0)/"/>
    <url>/2025/10/15/python%E7%9A%84%E8%BF%9B%E9%98%B6(%E7%AC%AC%E5%85%AB%E7%AB%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="文件的编码"><a href="#文件的编码" class="headerlink" title="文件的编码"></a>文件的编码</h1><p>计算机只认识0和1，多种埵言的格式形式，都是被计算机用编码技术翻译为0和1才能存入硬盘的<br>编码技术即翻译的规则，记录了如何将文字翻译为0和1，以及如何将二进制翻译回可识别内容</p><h2 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h2><p>在使用计算机时读取文件信息时步骤一般为打开，读取，关闭</p><ol><li>打开文件<br>在python中有内置的open函数来打开文件，语法如下<br>open(file, mode, encoding)<br>file:是包含打开的目标文件名的字符串（可以包括文件路径）<br>mode:设置打开文件的模式（访问模式）:只读，写入，追加等<br>encoding:设置打开文件的编码<br>**示例:f &#x3D; open(“test.txt”, “r”, encoding&#x3D;”utf-8”)**<strong>这里encoding使用的是关键字传参</strong><br>此时的f是open函数的文件对象，对象是python中一种特殊的数据类型，拥有属性和方法，可以使用对象.属性或对象.方法来调用<br>mode常用的三种基础访问模式<br>r以只读模式打开文件，文件的指针将会放在文件的开头，这是默认模式<br>w以写入模式打开文件，如果文件不存在则创建，如果文件存在则覆盖<br>a以追加模式打开文件，如果文件不存在则创建，如果文件存在则在文件末尾追加内容</li><li>读取文件<br>read方法<br>文件对象.read(num)<br>num:指定读取的字符数(字节)，如果不指定则读取所有内容<br>readline方法<br>文件对象.readline()<br>读取一行内容，包括行末的换行符<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>content = f.read(<span class="hljs-number">10</span>)<br>co = f.read()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;读取十个字符的结果:<span class="hljs-subst">&#123;content&#125;</span>，读取剩余字符的结果:<span class="hljs-subst">&#123;co&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure>在这里需注意<strong>连续调用read函数时，会从上一次读取的位置继续读取，而不是从文件开头开始读取</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>content = f.readlines()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;读取十个字符的结果:<span class="hljs-subst">&#123;content&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure>将文件内容读取到一个列表中，列表中的每一个元素都是文件中的一行内容<br>同时还有一个方法是readline，每次读取一行内容，包括换行符<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>content = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;读取一行内容的结果:<span class="hljs-subst">&#123;content&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><strong>for循环读取文件内容</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-built_in">print</span>(line, end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">#或者</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;python.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;line的内容是<span class="hljs-subst">&#123;line&#125;</span>&quot;</span>)<br>f.close()<br></code></pre></td></tr></table></figure>其结果是<br>A good medicine tastes bitter.<br>Better be the head of a dog than the tail of a lion.<br>It’s Okay to not be Okay.<br>Practice makes perfect.<br>All it takes is faith and trust.<br>You can’t please everyone.<br><strong>变量i获取到的作为字符串的每一行</strong><br>最后通过close，关闭文件对象，也就是关闭对文件的占用<br>如果不调用close，文件对象会一直占用，那么这个文件一直被pyton程序占用<br>还有一个是sleep语句，可以让程序暂停一段时间<br><strong>with语句</strong>可以自动关闭文件对象<br>语法为<br>with open(file, mode, encoding) as f:<h1 id="文件操作代码"><a href="#文件操作代码" class="headerlink" title="文件操作代码"></a>文件操作代码</h1></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<span class="hljs-comment">#这里的f就是文件对象</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-built_in">print</span>(line, end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>f.write(<span class="hljs-string">&quot;你好&quot;</span>)<br>f.flush()<br></code></pre></td></tr></table></figure><p>writer方法在文件不存在时会自动创建，在文件存在时会覆盖原有内容<br>直接调用writer，内容并未真正写入文件，而是会积攒在程序的内存里，称之为缓存区<br>当调用flush的时候，内容会真正写入文件<br>这样操作是为了避免频繁操作硬盘导致效率低下<br><strong>close方法会自动调用flush方法</strong></p><h4 id="文件的追加操作"><a href="#文件的追加操作" class="headerlink" title="文件的追加操作"></a>文件的追加操作</h4><p>在open函数内写入a模式，则会以追加模式打开文件，如果文件不存在则创建，如果文件存在则在文件末尾追加内容大部分与writer方法相同，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>f.write(<span class="hljs-string">&quot;你好&quot;</span>)<br>f.flush()<br></code></pre></td></tr></table></figure><h4 id="文件操作的综合案例"><a href="#文件操作的综合案例" class="headerlink" title="文件操作的综合案例"></a>文件操作的综合案例</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python3的开始(第六章)</title>
    <link href="/2025/10/11/python3%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E5%85%AD%E7%AB%A0)/"/>
    <url>/2025/10/11/python3%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E5%85%AD%E7%AB%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="数据容器的入门"><a href="#数据容器的入门" class="headerlink" title="数据容器的入门"></a>数据容器的入门</h1><p>数据容器:一种可以容纳多份数据的数据类型，容纳的每一份数据称之为一个元素，每一个元素，可以是任意类型的数据，如字符串，数字，布尔等<br>数据容器根据特点的不同如</p><ul><li>是否支持重复元素</li><li>是否可以修改</li><li>是否可以排序<br>分为五类</li><li>列表（list）</li><li>元组（tuple）</li><li>字典（dict）</li><li>集合（set）</li><li>字符串（str）</li></ul><ol><li>列表(list)<br>字面量<br>[1,2,3,4,5]<br>定义变量<br>a &#x3D; [1,2,3,4,5]<br>定义空列表<br>b &#x3D; []<br>变量名称 &#x3D; list()</li></ol><ul><li>必须以方括号[]包裹</li><li>元素之间用逗号隔开</li><li>元素可以是任意类型的数据，也可以嵌套列表</li><li>列表里的每个数据称之为元素<br>a &#x3D; [1,2,3,4,5]<br>b &#x3D; [[1,2,3],[4,5,6]]<br><strong>下标索引</strong><br>列表中的元素，可以通过下标索引来访问，从左到右，下标从0开始<br>a &#x3D; [1,2,3,4,5]<br>a[0]#就是访问a列表中下标为0的元素即1<br>print(a[0])<br>或者可以通过负数来访问，从右到左，下标从-1开始<br>a[-1]<br>print(a[-1])<br>嵌套列表的下标索引<br>b &#x3D; [[1,2,3],[4,5,6]]<br>b[0][0]<br>print(b[0][0])<br>列表的常用操作</li><li>插入元素</li><li>删除元素</li><li>修改元素</li><li>清空列表</li><li>统计元素个数<br>这些功能被称之为列表的<strong>方法</strong><br>在python中如果将函数定义为类(class)的成员，那么函数称之为<strong>方法</strong>,总的来说，方法就是类中定义的函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-keyword">return</span> x + y<br><br>s = Student()  <span class="hljs-comment"># 实例化</span><br><span class="hljs-built_in">print</span>(s.say_hello(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 调用方法</span><br></code></pre></td></tr></table></figure>查找元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.index(<span class="hljs-number">3</span>)<span class="hljs-comment">#查找元素3的下标</span><br><span class="hljs-built_in">print</span>(a.index(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure>修改元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure>元素的插入<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.insert(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<span class="hljs-comment">#在下标为1的位置插入100</span><br><span class="hljs-built_in">print</span>(a)<span class="hljs-comment">#插入的元素会被放到下标为1的位置</span><br></code></pre></td></tr></table></figure>元素的追加<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.append(<span class="hljs-number">100</span>)<span class="hljs-comment">#追加元素100到列表的末尾</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure>追加一批元素<br>将其他容器里的内容取出，然后依次追加到列表里<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.extend([<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>])<span class="hljs-comment">#追加一批元素</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure>删除元素<br>删除指定下标的元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.pop(<span class="hljs-number">1</span>)<span class="hljs-comment">#删除下标为1的元素,并返回被删除的元素,所以可以用一个变量来接收被删除的元素</span><br>b = a.pop(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">del</span> a[<span class="hljs-number">1</span>]<span class="hljs-comment">#删除下标为1的元素</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure>删除某元素在列表的第一个匹配项<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.remove(<span class="hljs-number">1</span>)<span class="hljs-comment">#删除第一个匹配的元素，这里的1不是下标，而是元素的值</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure>删除列表的所有元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.clear()<span class="hljs-comment">#清空列表</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure>统计元素个数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>a.count(<span class="hljs-number">1</span>)<span class="hljs-comment">#统计元素1的个数</span><br><span class="hljs-built_in">print</span>(a.count(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure>统计列表中元素的个数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">len</span>(a)<span class="hljs-comment">#统计列表中元素的个数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br></code></pre></td></tr></table></figure></li></ul><h3 id="列表方法总结"><a href="#列表方法总结" class="headerlink" title="列表方法总结"></a>列表方法总结</h3><ul><li><strong>查询元素下标</strong>：<code>index</code></li><li><strong>插入元素</strong>：<code>insert</code></li><li><strong>追加元素</strong>：<code>append</code>（单个）或 <code>extend</code>（多个）</li><li><strong>删除元素</strong>：<code>pop</code>（返回被删除元素）、<code>del</code>（按索引删除）、<code>remove</code>（按值删除）</li><li><strong>清空列表</strong>：<code>clear</code></li><li><strong>统计元素</strong>：<code>count</code>（统计某个值的出现次数）、<code>len</code>（统计元素总数）</li></ul><h2 id="list的遍历"><a href="#list的遍历" class="headerlink" title="list的遍历"></a>list的遍历</h2><p>既然列表可以存储任意类型的数据，那么我们就可以遍历列表，取出列表中的每一个元素，然后进行相应的操作</p><ol><li>使用while循环<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>i = <span class="hljs-number">0</span>  <span class="hljs-comment"># 初始化变量i</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(numbers):  <span class="hljs-comment"># 更正变量名为numbers</span><br>    <span class="hljs-built_in">print</span>(numbers[i])<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li>使用for循环<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]  <span class="hljs-comment"># 数据容器</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> numbers:  <span class="hljs-comment"># 临时变量i</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure>小练习<br>a &#x3D; [1,2,3,4,5,6,7,8,9,10]<br>将a中的偶数存储到一个新的列表中，并打印出来,分别用for和while两种方式实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter_even_numbers</span>(<span class="hljs-params">numbers</span>):<br>    even_numbers = []<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers:<br>        <span class="hljs-keyword">if</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            even_numbers.append(num)<br>    <span class="hljs-built_in">print</span>(even_numbers)<br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>double(a)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter_even_numbers_while</span>(<span class="hljs-params">numbers</span>):<br>    even_numbers = []<br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> index &lt; <span class="hljs-built_in">len</span>(numbers):<br>        <span class="hljs-keyword">if</span> numbers[index] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            even_numbers.append(numbers[index])<br>        index += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(even_numbers)<br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>now(a)<br></code></pre></td></tr></table></figure></li></ol><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h2><p>元组和列表非常类似，但是元组是不可变的，也就是说元组里的元素不能被修改，只能被读取<br>元组的定义</p><ul><li>必须以圆括号()包裹</li><li>元素之间用逗号隔开</li><li>元素可以是任意类型的数据，也可以嵌套元组</li><li>元组里的每个数据称之为元素</li><li>元组的元素可以通过下标索引来访问</li><li>元组的元素不能被修改<br>变量名称 &#x3D; ()<br>变量名称 &#x3D; tuple()<br>另外当元组内只有一个元素时，需要在元素后面加一个逗号，否则会被当做字符串处理 t &#x3D; (1,)，如果不写逗号，会被当做字符串处理<br>但是存在一个特例，当元组内嵌套了可变对象（如列表）时，嵌套的对象可以被修改<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>t[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>  <span class="hljs-comment"># 报错，因为元组是不可变的</span><br>t1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])  <span class="hljs-comment"># 元组中嵌套的列表可以被修改</span><br>t1[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>  <span class="hljs-comment"># 修改列表的第一个元素</span><br><span class="hljs-built_in">print</span>(t1)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s = (<span class="hljs-string">&quot;周杰伦&quot;</span>,<span class="hljs-number">11</span>,[<span class="hljs-string">&quot;football&quot;</span>,<span class="hljs-string">&quot;music&quot;</span>])  <span class="hljs-comment"># 元组中嵌套的列表可以被修改</span><br><span class="hljs-built_in">print</span>(s.index(<span class="hljs-number">11</span>))<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">del</span> s[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]  <span class="hljs-comment"># 删除列表中的元素</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">2</span>])<br>s[<span class="hljs-number">2</span>].append(<span class="hljs-string">&quot;game&quot;</span>)  <span class="hljs-comment"># 向列表中添加元素</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure></li></ul><h3 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串(str)"></a>字符串(str)</h3><p>字符串是字符的集合，字符串的定义</p><ul><li>必须以单引号’’或双引号””包裹</li><li>字符串的元素称之为字符</li><li>只可以存储字符，不能存储其他类型的数据</li><li>字符串的元素可以通过下标索引来访问</li><li>字符串的元素不能被修改（不可变类型），但是可以生成新的字符串</li><li>字符串的元素可以被切片<br>字符串的替换<br>语法：字符串.replace(旧字符串,新字符串)<br>功能：将字符串中的旧字符串替换为新字符串，字符串1替换为字符串2<br>注意：不是修改字符串本身而是生成了新字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello world&quot;</span><br>s1 = s.replace(<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;python&quot;</span>)<span class="hljs-comment">#将字符串中的world替换为python</span><br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure>字符串的分割<br>语法：字符串.split(分割符)<br>功能：将字符串按照分割符分割成多个子字符串，并返回一个列表<br>注意：分割符可以是任意字符串，默认是空格<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello world&quot;</span><br>s1 = s.split(<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">#将字符串按照空格分割成多个子字符串，并返回一个列表</span><br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure>字符串的规整<br>语法：字符串.strip()<br>功能：去除字符串两端的空白字符<br>注意：去除的是空白字符，不是空字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot; hello world &quot;</span><br>s1 = s.strip()<span class="hljs-comment">#去除字符串两端的空白字符</span><br><span class="hljs-built_in">print</span>(s1)<br><br><span class="hljs-comment">#传参</span><br>s = <span class="hljs-string">&quot;12hello world21&quot;</span><br>s2 = s.strip(<span class="hljs-string">&quot;12&quot;</span>)<span class="hljs-comment">#去除字符串两端的空白字符</span><br><span class="hljs-built_in">print</span>(s2)<br></code></pre></td></tr></table></figure>字符串同样可以使用count来统计<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello world&quot;</span><br>s1 = s.count(<span class="hljs-string">&quot;l&quot;</span>)<span class="hljs-comment">#统计字符串中l的个数</span><br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure></li></ul><h4 id="数据的容器的切片"><a href="#数据的容器的切片" class="headerlink" title="数据的容器的切片"></a>数据的容器的切片</h4><p><strong>序列指的是内容，连续，有序可使用下标索引的一类数据容器</strong><br><strong>列表，元组，字符串</strong>均可以叫做<strong>序列</strong><br>序列支持切片，切片就是从序列中取出一部分数据，并生成一个新的序列<br>切片的语法：序列[开始下标:结束下标:步长]<br>对于序列的操作都不影响其本身，而是生成一个新的序列<br>对序列进行切片<br>如果不声明步长，默认步长为1<br>如果不声明开始下标起始，那么默认就是从头到尾<br>如果步长是负数，那么从右到左</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello world&quot;</span><span class="hljs-comment">#元组，列表，字符串都可以</span><br>s1 = s[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<span class="hljs-comment">#从序列中取出下标0到4的元素，并生成一个新的序列</span><br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><p>有一点需要注意，序列后不只可以有一次操作可以有多次操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello world&quot;</span><span class="hljs-comment">#元组，列表，字符串都可以</span><br>s1 = s[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>][::-<span class="hljs-number">1</span>]<span class="hljs-comment">#从序列中取出下标0到4的元素，并倒序生成一个新的序列</span><br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><h5 id="数据容器集合-set"><a href="#数据容器集合-set" class="headerlink" title="数据容器集合(set)"></a>数据容器集合(set)</h5><p>序列并不包含集合</p><ul><li>列表可以修改，支持重复元素且有序</li><li>元组，字符串不可以修改，支持重复元素且有序</li><li>集合，字典，<strong>可修改</strong>，不支持重复元素，无序<br>集合的定义</li><li>必须以大括号{}包裹</li><li>元素之间用逗号隔开</li><li>元素可以是任意类型的数据，也可以嵌套元组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>&#125; <br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-comment">#自动去重，不支持下标索引，不支持切片，支持修改</span><br></code></pre></td></tr></table></figure></li><li>my_set &#x3D; {1, 2, 3, 4, 5}</li><li>my_set.add(6)  # 向集合中添加元素</li><li>my_set.remove(1)  # 从集合中删除元素</li><li>my_set.pop()  # 随机删除集合中的一个元素，既然有返回值就需要有变量来接收</li><li>my_set.clear()  # 清空集合，集合是允许修改的所以可以不用变量来接受</li><li><strong>取出两个集合的差值</strong>，即在第一个集合中，不在第二个集合中<br>语法：集合1.difference(集合2)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>s2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;<br>s3 = s1.difference(s2)<span class="hljs-comment">#取出两个集合的差值，即在第一个集合中，不在第二个集合中</span><br><span class="hljs-built_in">print</span>(s3)<br></code></pre></td></tr></table></figure><strong>消除两个集合的交集</strong>，即在集合一内删除和集合2相同的元素<br>语法：集合1.difference_update(集合2)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>s2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;<br>s1.difference_update(s2)<span class="hljs-comment">#消除两个集合的交集</span><br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure></li><li><strong>取出两个集合的交集</strong>，即在第一个集合中，也在第二个集合中<br>语法：集合1.intersection(集合2)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>s2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;<br>s3 = s1.intersection(s2)<span class="hljs-comment">#取出两个集合的交集，即在第一个集合中，也在第二个集合中</span><br><span class="hljs-built_in">print</span>(s3)<br></code></pre></td></tr></table></figure></li><li><strong>取出两个集合的并集</strong>，即在第一个集合中，也在第二个集合中，或者在第一个集合中，或者在第二个集合中<br>语法：集合1.union(集合2)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>s2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;<br>s3 = s1.union(s2)<span class="hljs-comment">#取出两个集合的并集，即在第一个集合中，也在第二个集合中，或者在第一个集合中，或者在第二个集合中</span><br><span class="hljs-built_in">print</span>(s3)<br></code></pre></td></tr></table></figure></li><li>统计集合中元素的个数<br>语法：len(集合)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>s2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;<br>s3 = s1.union(s2)<span class="hljs-comment">#取出两个集合的并集，即在第一个集合中，也在第二个集合中，或者在第一个集合中，或者在第二个集合中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s3))<br></code></pre></td></tr></table></figure>集合的遍历<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>s2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;<br>s3 = s1.union(s2)<span class="hljs-comment">#取出两个集合的并集，即在第一个集合中，也在第二个集合中，或者在第一个集合中，或者在第二个集合中</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s3:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure></li></ul><h5 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h5><p>python中的字典与生活中极为相像，字典就是一个容器，里面存储的是键值对，键值对的形式是key:value，例如老师有一份成绩单，里面存储了每个学生的姓名和成绩，那么这个字典的key就是学生的姓名，value就是学生的成绩，可以通过学生姓名检索学生的成绩<br>字典的定义</p><ul><li>必须以大括号{}包裹</li><li>储存的是一个个的键值对<br>字典的key和value可以是任意类型的数据，也可以嵌套<br>但是key不能不为字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br><span class="hljs-comment">#定义空字典</span><br>d1 = &#123;&#125;<br><span class="hljs-comment">#或者</span><br>d1 = <span class="hljs-built_in">dict</span>()<br></code></pre></td></tr></table></figure>字典的增删改查</li><li>增：字典[key] &#x3D; value</li><li>删：del 字典[key]</li><li>改：字典[key] &#x3D; value</li><li>查：字典[key]<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br>d[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;lisi&quot;</span><br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure>字典的常用操作</li><li>新增元素<br>语法：字典[key] &#x3D; value 如果key不存在，则新增元素，如果key存在，则修改元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br>d[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;lisi&quot;</span><br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure>删除元素<br><strong>字典.pop(key)</strong><br>功能：删除字典中指定key的元素，<strong>并返回value</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br>c = d.pop(<span class="hljs-string">&quot;name&quot;</span>)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure>获取字典所有key<br><strong>字典.keys()</strong><br>功能：获取字典中所有key，并返回一个列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br>c = d.keys()<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure>遍历字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br>keys = d.keys()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> keys:<span class="hljs-comment">#其实也可以直接写d</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;key的值是<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;value的值是<span class="hljs-subst">&#123;d[i]&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure>字典是支持嵌套的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = &#123;<span class="hljs-string">&quot;刘德华&quot;</span>:&#123;<span class="hljs-string">&quot;性别&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;年龄&quot;</span>:<span class="hljs-string">&quot;35&quot;</span>&#125;,<span class="hljs-string">&quot;张学友&quot;</span>:&#123;<span class="hljs-string">&quot;性别&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;年龄&quot;</span>:<span class="hljs-string">&quot;36&quot;</span>&#125;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;姓名：<span class="hljs-subst">&#123;i&#125;</span> 年龄：<span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>[i][<span class="hljs-string">&#x27;年龄&#x27;</span>]&#125;</span> 性别：<span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>[i][<span class="hljs-string">&#x27;性别&#x27;</span>]&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><hr><p>到目前为止已经学习了五种数据容器，分别是列表，元组，字符串，集合，字典，在本片的末尾来回顾一下这五种数据容器<br>我觉得根据大致特点可以如此分类</p><ul><li>是否支持下标索引（这里回顾下序列的定义：<strong>序列指的是内容，连续，有序可使用下标索引的一类数据容器</strong>）<br>支持：列表，元组，字符串<br>不支持：集合，字典</li><li>是否支持重复元素<br>支持：列表，元组，字符串<br>不支持：集合，字典</li><li>是否支持修改<br>支持：列表，字典，集合<br>不支持：元组，字符串<br>大概如图所示<br><img src="https://youke1.picui.cn/s1/2025/10/10/68e8d53a0b0e4.png" alt="数据容器的分类"><br>数据容器的通用操作</li><li>遍历<br>所有的数据容器都可以使用for循环</li><li>统计元素的最大元素<br>在本章节中最常用的统计功能是len(容器)，len()函数可以统计容器中元素的个数,其实还存在max()函数，可以统计容器中元素的最大值，min()函数可以统计容器中元素的最小值</li><li>通用转换功能<br>如同前面章节所提到整数转字符串，在这里也可以使用str()函数，将容器转换为字符串，同时还有list()函数，将容器转换为列表，tuple()函数，将容器转换为元组，set()函数，将容器转换为集合<br>容器转列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>b = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>c = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br>d = <span class="hljs-string">&quot;1232323232&quot;</span><br>f = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(f))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(c))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(d))<br></code></pre></td></tr></table></figure>其结果为<br>[1, 2, 3, 4, 5]列表转列表<br>[1, 2, 3, 4, 5]集合转列表<br>[1, 2, 3, 4, 4]元组转列表<br>[‘1’, ‘2’, ‘3’, ‘2’, ‘3’, ‘2’, ‘3’, ‘2’, ‘3’, ‘2’]字符串转列表<br>[‘name’, ‘age’]字典转列表,转换时只会在意key<br>容器转元组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>b = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>c = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br>d = <span class="hljs-string">&quot;1232323232&quot;</span><br>f = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(f))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(c))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(d))<br></code></pre></td></tr></table></figure>其结果为,与转列表基本无异<br>(1, 2, 3, 4, 5)<br>(1, 2, 3, 4, 5)<br>(1, 2, 3, 4, 4)<br>(‘1’, ‘2’, ‘3’, ‘2’, ‘3’, ‘2’, ‘3’, ‘2’, ‘3’, ‘2’)<br>(‘name’, ‘age’)<br>容器转字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>b = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>c = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br>d = <span class="hljs-string">&quot;1232323232&quot;</span><br>f = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(f))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(c))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(d))<br></code></pre></td></tr></table></figure>其结果为<br>[1, 2, 3, 4, 5] 其数据本身应该是”1,2,3,4,5”只是输出时并没有输出引号<br>{1, 2, 3, 4, 5}<br>(1, 2, 3, 4, 4)<br>1232323232<br>{‘name’: ‘zhangsan’, ‘age’: 18}<br>容器转集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>b = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>c = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br>d = <span class="hljs-string">&quot;1232323232&quot;</span><br>f = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(f))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(c))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(d))<br></code></pre></td></tr></table></figure>结果是<br>{‘age’, ‘name’}<br>{1, 2, 3, 4, 5}<br>{1, 2, 3, 4, 5}<br>{1, 2, 3, 4}<br>{‘1’, ‘2’, ‘3’}集合时不支持重复元素的，所以会自动去重<br>容器通用排序<br>语法是sorted(容器),[reverse&#x3D;True]如果要反转排序，则reverse&#x3D;True，默认是false<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(a, reverse=<span class="hljs-literal">True</span>))<br>b = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(b, reverse=<span class="hljs-literal">True</span>))<br>c = (<span class="hljs-number">1</span>,<span class="hljs-number">12</span>,<span class="hljs-number">43</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(c))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(c, reverse=<span class="hljs-literal">True</span>))<br>d = <span class="hljs-string">&quot;1232323232&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(d))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(d, reverse=<span class="hljs-literal">True</span>))<br>f = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(f))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(f, reverse=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure>结果是<br>[1, 3, 4, 5, 23]<br>[23, 5, 4, 3, 1]<br>[1, 4, 5, 22, 33]<br>[33, 22, 5, 4, 1]<br>[1, 4, 4, 12, 43]<br>[43, 12, 4, 4, 1]<br>[‘1’, ‘2’, ‘2’, ‘2’, ‘2’, ‘2’, ‘3’, ‘3’, ‘3’, ‘3’]<br>[‘3’, ‘3’, ‘3’, ‘3’, ‘2’, ‘2’, ‘2’, ‘2’, ‘2’, ‘1’]<br>[‘age’, ‘name’]<br>[‘name’, ‘age’]<br>可以看到返回的是一个列表，对字典排序时，只会返回key<br>通用操作如下<br><img src="https://youke1.picui.cn/s1/2025/10/11/68e9e29d639ae.png" alt="通用操作"></li></ul><h6 id="字符串的大小比较"><a href="#字符串的大小比较" class="headerlink" title="字符串的大小比较"></a>字符串的大小比较</h6><p>ASCII码表<br>在程序中，字符串所用的所有字符如</p><ul><li>大小写英文单词</li><li>数字</li><li>特殊字符<br>等都有对应的ASCII码值，用于比较字符串的大小。比较时，程序会按照字符的ASCII码值进行比较，而不是按照字典序。<br>字符串是按位比较的，如果第一个字符相同，则比较第二个字符，以此类推，直到找到不同的字符为止。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;123&quot;</span><br>b = <span class="hljs-string">&quot;456&quot;</span><br><span class="hljs-built_in">print</span>(a &gt; b)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a &lt; b)  <span class="hljs-comment"># True</span><br>c = <span class="hljs-string">&quot;123&quot;</span><br>d = <span class="hljs-string">&quot;12&quot;</span><br><br><span class="hljs-built_in">print</span>(c &gt; d)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(c &lt; d)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python的开始(第五章)</title>
    <link href="/2025/10/02/python%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E4%BA%94%E7%AB%A0)/"/>
    <url>/2025/10/02/python%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E4%BA%94%E7%AB%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="函数的初体验"><a href="#函数的初体验" class="headerlink" title="函数的初体验"></a>函数的初体验</h1><p>函数的定义:是<strong>组织好的</strong>，<strong>可重复使用的</strong>，<strong>用来实现特定功能的代码段</strong></p><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>格式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">传入参数</span>):<br>    函数体<br>    <span class="hljs-keyword">return</span> 返回值<br></code></pre></td></tr></table></figure><p>传入参数和return是可以省略的<br>函数的传入参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<span class="hljs-comment">#x和y叫做形式参数，表示函数声明将要使用两个参数，参数之间要用逗号进行分离，函数调用的时候需要按顺序传入数据</span><br>    result = x + y<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;x&#125;</span>+<span class="hljs-subst">&#123;y&#125;</span>的值是<span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<span class="hljs-comment">#真正使用的参数叫做实际参数</span><br></code></pre></td></tr></table></figure><p>#函数的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<br>    result = x + y<br>    <span class="hljs-keyword">return</span> result<span class="hljs-comment">#return 返回值，表示函数执行完毕后将结果返回给调用者</span><br>r = add(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>但是如果函数没有return语句，那么函数执行完毕后会返回一个None，<strong>且如果return后还有语句，则不会执行</strong>,如果没有写return语句，那么函数执行完毕后会返回一个None,None是类‘NoneType’的字面量，用于表示空的，无意义的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x &gt;<span class="hljs-number">18</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>result = check(<span class="hljs-number">19</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未成年&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="函数的注释"><a href="#函数的注释" class="headerlink" title="函数的注释"></a>函数的注释</h3><p>我们可以给函数添加说明文档，去辅助函数的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    这是一个加法函数</span><br><span class="hljs-string">    :param x: 第一个加数</span><br><span class="hljs-string">    :param y: 第二个加数</span><br><span class="hljs-string">    :return: 返回两个加数的和</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    result = x + y<br>    <span class="hljs-keyword">return</span> result<br>n = add(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(add.__doc__)<span class="hljs-comment">#打印函数的注释</span><br></code></pre></td></tr></table></figure><h4 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h4><p>函数可以嵌套，嵌套的函数可以调用外部函数的参数和返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;add&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add2</span>():<br>    add()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;add2&quot;</span>)<br>add2()<br></code></pre></td></tr></table></figure><h5 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h5><p>变量作用域指的是变量的作用范围，主要分为局部变量和全局变量</p><ul><li>局部变量:在函数内部定义的变量，只能在函数内部使用</li><li>全局变量:在函数外部定义的变量，可以在函数内部和外部使用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    a = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(a)<br>add()<br><span class="hljs-built_in">print</span>(a)<span class="hljs-comment">#报错，因为a是局部变量，只能在函数内部使用</span><br></code></pre></td></tr></table></figure>这里的临时变量和和外面的永久变量互不影响，但是可以使用global关键字来声明全局变量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    <span class="hljs-keyword">global</span> a<br>    a = <span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(a)<br>add()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure>用函数一个atm机，实现取款，存款，查询余额<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python">yue = <span class="hljs-number">10000</span><span class="hljs-comment">#定义全局变量</span><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入您的姓名：&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">withdraw</span>():<br>    <span class="hljs-keyword">global</span> yue<span class="hljs-comment">#声明全局变量</span><br>    money = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入提现金额：&quot;</span>))<br>    <span class="hljs-keyword">if</span> money &gt; yue:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;余额不足，提现失败&quot;</span>)<br>        main()<span class="hljs-comment">#调用主函数，重新进入主菜单</span><br>    <span class="hljs-keyword">else</span>:<br>        yue -= money<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;提现成功，当前余额为：<span class="hljs-subst">&#123;yue&#125;</span>元&quot;</span>)<br>        main()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;你好，您的余额为：<span class="hljs-subst">&#123;yue&#125;</span>元&quot;</span>)<br>    main()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_money</span>():<br>    <span class="hljs-keyword">global</span> yue<br>    money = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入充值金额：&quot;</span>))<br>    yue += money<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;充值成功，当前余额为：<span class="hljs-subst">&#123;yue&#125;</span>元&quot;</span>)<br>    main()<br><span class="hljs-comment">#其实这里可以用一种编程思想，可以进一步提高的代码复用率，控制函数的传入参数，在某个函数中想传入另一个函数，但是另一个函数有部分结果不需要，就可以在另一个函数内用if来判断，</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------主菜单-------&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1. 查询余额&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2. 提现&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3. 充值&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4. 退出&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------------&quot;</span>)<br>    option = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入操作选项：&quot;</span>)<br>    <span class="hljs-keyword">if</span> option == <span class="hljs-string">&quot;1&quot;</span>:<br>        search()<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-string">&quot;2&quot;</span>:<br>        withdraw()<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-string">&quot;3&quot;</span>:<br>        input_money()<br>    <span class="hljs-keyword">elif</span> option == <span class="hljs-string">&quot;4&quot;</span>:<br>        main()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入错误，请重新输入&quot;</span>)<br>        main()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;欢迎使用ATM系统&quot;</span>)<br><span class="hljs-built_in">print</span>(main())<span class="hljs-comment">#调用主函数，进入主菜单</span><br><span class="hljs-comment">#这里我写的有点长了，没个函数都有print输出，可以用一个函数来处理，但是我这里为了方便，就直接写了</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python的开始(第四章)</title>
    <link href="/2025/10/02/python%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E5%9B%9B%E7%AB%A0)/"/>
    <url>/2025/10/02/python%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E5%9B%9B%E7%AB%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><p>只要条件满足，会一直循环执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    条件满足时,做的事情<br></code></pre></td></tr></table></figure><p>条件的结果必须是布尔类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">100</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;小美我喜欢你&quot;</span>)<br>    i = i+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>同样也可以用来上一张的猜数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>num = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>num1 = <span class="hljs-number">0</span><br>num3 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个1-100的数&quot;</span>))<br><span class="hljs-keyword">while</span> num3 != num:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜错了&quot;</span>)<br>    <span class="hljs-keyword">if</span> num3 &gt; num:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大了&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;小了&quot;</span>)<br>    num1 += <span class="hljs-number">1</span><br>    num3 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个1-100的数&quot;</span>))<br>    <br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;猜对了，总共猜了<span class="hljs-subst">&#123;num1&#125;</span>次&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="while循环的嵌套"><a href="#while循环的嵌套" class="headerlink" title="while循环的嵌套"></a>while循环的嵌套</h2><p>在字符串中，有一个特殊符号：&#x2F;t，等同于在键盘上按下tab键，它可以让我们的多行字符串进行对齐操作类似于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;helllo\tword&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bye\tbye&quot;</span>)<br></code></pre></td></tr></table></figure><p>首先补充一下python中的输出换行操作<br>类似于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>, end= <span class="hljs-string">&#x27;&#x27;</span> )<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;world&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>利用while输出九九乘法表，其中需要多次判定<strong>print()可以理解为换行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#我首先定义了竖着的长和横着的宽，竖着的长由9减到1，横着的则由1增加到9</span><br>long = <span class="hljs-number">9</span><br><span class="hljs-keyword">while</span> long &gt;= <span class="hljs-number">1</span>:<br>    width = <span class="hljs-number">10</span> - long<br>    b = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> b &lt;= width:<br>        <span class="hljs-keyword">if</span> b != width:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;b&#125;</span>*<span class="hljs-subst">&#123;width&#125;</span>=<span class="hljs-subst">&#123;b*width&#125;</span>&quot;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">#判断换行</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;b&#125;</span>*<span class="hljs-subst">&#123;width&#125;</span>=<span class="hljs-subst">&#123;b*width&#125;</span>&quot;</span>)<br>        b += <span class="hljs-number">1</span><br>    long -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>分为三个部分分别是</p><ul><li>基础语法</li><li>range语句</li><li>变量作用域</li></ul><ol><li>基础语法<br>while的循环条件是自定义的，但是for循环是自定义的，自行控制循环条件。for循环时一种轮询的机制，是对一批内容进行逐个处理。<br>for **<strong>临时变量</strong> in <strong>待处理数据集(序列类型)</strong>:<br>循环满足条件时执行的代码<br>遍历字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;bieshuole&quot;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> name:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure>这可以实现字符串的遍历<br>同while循环不同，for循环是无法定义循环条件的，只能从被处理的数据集中，依次取出内容进行处理。所以理论来讲，python的for循环无法构建无线循环（被处理的数据不可能无限大）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a =<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;she is a pretty girl&quot;</span>):<br>    <span class="hljs-keyword">if</span> x == <span class="hljs-string">&quot;a&quot;</span>:<br>        a = a + <span class="hljs-number">1</span><br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一共有%d个a&quot;</span> % a)<br><span class="hljs-comment">#通过遍历判断a的数量</span><br></code></pre></td></tr></table></figure></li><li>range语句<br>for **<strong>临时变量</strong> in <strong>待处理数据集(序列类型)</strong>:<br>循环满足条件时执行的代码<br>序列类型值，其内容可以一个个依次取出的一种类型包括</li></ol><ul><li><strong>字符串</strong></li><li>列表</li><li>元组</li><li>等<br>语法1<br>range(num)<br>获取一个从0开始，到num结束的数字序列(不含num本身)，<br>如range(5)取得的数据是{0，1，2，3，4}<br>语法2<br>range(num,num2)<br>获取一个从num1开始，到num2结束的数字系列(不含num本身)<br>如range(5,10)获得的数据是{5，6，7，8，9}<br>语法3<br>range(num1,num2,step)<br>获得一个从num1开始，到num2结束的数字序列(不包含num2本身)<br>数字之间的步长，以step为准(step默认是1)<br>如range(5,10,2)取得的数据是{5，7，9}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>     <span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span> ==<span class="hljs-number">0</span>:<br>            a = a + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;一共有<span class="hljs-subst">&#123;a&#125;</span>个偶数&quot;</span>)<br></code></pre></td></tr></table></figure>小练习</li></ul><ol start="3"><li>变量作用域<br>在for循环上<br>for i in range():<br>for i in range(5):<br> print(i)<br>print(i)<br>原则上来说，变量i是临时变量，不能再循环外访问，但是一般来说是可以访问最后值</li></ol><h4 id="for循环的嵌套"><a href="#for循环的嵌套" class="headerlink" title="for循环的嵌套"></a>for循环的嵌套</h4><p>用for循环去写九九乘法表，因为for循环不能如同while循环那样去定义循环条件，所以要用range来确定执行次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<span class="hljs-comment">#确定行数</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>):<span class="hljs-comment">#因为for取不到到最后那个数且不定义会取到0</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>*<span class="hljs-subst">&#123;j&#125;</span>=<span class="hljs-subst">&#123;i*j&#125;</span>&quot;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<span class="hljs-comment">#内嵌的for循环执行完毕要换行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><ol><li>continue关键字的作用用于<strong>中断本次循环</strong>，<strong>直接进行下一次循环</strong><br>for i in range(1,100):<br> 语句1<br> continue<br> 语句2<br>continue可以是语句跳过下个语句执行下一次</li><li>break关键字<strong>直接结本次循环</strong><br>例如<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;语句2&quot;</span>)<br>    <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;语句2&quot;</span>)<br></code></pre></td></tr></table></figure>小练习<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>a = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>    b = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">if</span> a &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;钱发完了&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> b &lt; <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>号员工绩效<span class="hljs-subst">&#123;b&#125;</span>太低不发工资&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>号员工绩效<span class="hljs-subst">&#123;b&#125;</span>发工资&quot;</span>)<br>        a = a - <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">20</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;只发了<span class="hljs-subst">&#123;i&#125;</span>个人&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python的开始(第二章)</title>
    <link href="/2025/10/01/python%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E4%BA%8C%E7%AB%A0)/"/>
    <url>/2025/10/01/python%E7%9A%84%E5%BC%80%E5%A7%8B(%E7%AC%AC%E4%BA%8C%E7%AB%A0)/</url>
    
    <content type="html"><![CDATA[<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>标识符是用户在编程时所使用的一系列名称，例如变量，类，方法等</p><ul><li>开头必须是下划线和字母</li><li>不能为语言内的变量</li><li>只允许出现英文，中文，数字，下划线<br><strong>Python3允许使用Unicode字符作为标识符，可以用中文作为变量名，非ASCII标识符也是允许的了</strong></li></ul><h2 id="python中的长语句用-表示-例如如下"><a href="#python中的长语句用-表示-例如如下" class="headerlink" title="python中的长语句用&#x2F;表示 例如如下"></a>python中的长语句用&#x2F;表示 例如如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">item_one = <span class="hljs-number">1</span><br>item_two = <span class="hljs-number">2</span><br>item_three = <span class="hljs-number">3</span><br>total = item_one + \<br>        item_two + \<br>        item_three<br><span class="hljs-built_in">print</span>(total) <span class="hljs-comment"># 输出为 6</span><br></code></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>在python中数字分为四种类型，整数、布尔型、浮点数和复数。</p><ul><li>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li>bool布尔型 如true</li><li>float (浮点数), 如 1.23、3E-2</li><li>complex (复数) - 复数由实部和虚部组成，形式为 a + bj，其中 a 是实部，b 是虚部，j 表示虚数单位。如 1 + 2j、 1.1 + 2.2j</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p>显示字变量的类型<br><strong>注意:在显示字符串串时像表示引号可用单双引号交替，或者使用\转义字符</strong><br>类型的转换<br>为什么需要转换呢</p><ul><li>从文件中读取的数字，默认都是字符串，我们需要转换为数字类型</li><li>input语句，默认结果也是字符串，也需要转换</li><li>将数字转换为字符串用以写出到外部系统</li><li>等<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">demo = <span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 将整数转换字符串后的整数1存储在demo变量中</span><br><span class="hljs-comment">#将1转换为字符串 验证即可用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(demo))<br></code></pre></td></tr></table></figure>同理字符串转整数是相同的，但要求字符串内必须是数字<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">demo = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;11&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(demo))<br></code></pre></td></tr></table></figure>整数int可以转换为float浮点数，具体被改为14.0类似形式，浮点数转整数时会<strong>丢失小数部分</strong></li></ul><h3 id="字符串补充"><a href="#字符串补充" class="headerlink" title="字符串补充"></a>字符串补充</h3><ul><li>字符串的拼接<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a =<span class="hljs-number">12</span><br>b =<span class="hljs-number">13</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a +b&quot;</span>,a+b)<br></code></pre></td></tr></table></figure>+同样可用于字符串的拼接<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;12&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我已经&quot;</span> + a)<br><span class="hljs-comment">#字符串拼接时不能直接与整数等其他类型拼接，只能是字符串</span><br></code></pre></td></tr></table></figure></li><li>字符串的格式化<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;xiaowang&quot;</span><br>other = <span class="hljs-string">&quot;我的名字是%s&quot;</span> % name<br><span class="hljs-built_in">print</span>(other)<br><span class="hljs-comment">#同样可以拼接数字</span><br>age = <span class="hljs-number">17</span><br><span class="hljs-keyword">class</span> = <span class="hljs-number">18</span><br>other = <span class="hljs-string">&quot;我的年龄是%s,我的班级时%s&quot;</span> % (age,<span class="hljs-keyword">class</span>)<br><span class="hljs-comment">#多个占位符出现时，需要用括号括起来且必须按照顺序排开</span><br><span class="hljs-comment">#在这里用的%s是将变量转换为字符串，所以%s，%d,%f同理</span><br></code></pre></td></tr></table></figure></li><li>格式化的精确控制<br>在上面如果使用%d没有任何其他操作时，就会出现小数点后存在多个0，所以需要精度控制<br>我们可以使用m.n的形式来控制数据的宽度和精度，m控制宽度，要求是数字（很少使用），设置的宽度小于数字本身，不生效，.n控制小数点精度，要求是数字，会进行小数的四舍五入<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">12.345</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a的数值是%5.2f&quot;</span> % a)<br></code></pre></td></tr></table></figure><strong>m设置的宽度小于数字本身，不生效,大于本身，会用0来填充</strong><br>同时还有一种方法可以快速实现精度控制但是<strong>不限制数据类型,可以实现精度控制，如{a:.2f}</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;小王&quot;</span><br>age = <span class="hljs-number">17</span><br><span class="hljs-keyword">class</span> = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我的名字是<span class="hljs-subst">&#123;name&#125;</span>,我的年龄是<span class="hljs-subst">&#123;age&#125;</span>，我的班级是<span class="hljs-subst">&#123;<span class="hljs-keyword">class</span>&#125;</span>&quot;</span>)<br><span class="hljs-comment">#f开头，&#123;&#125;内写变量，可快速格式化</span><br></code></pre></td></tr></table></figure>这里的f就是format，与c语言里的printf类似</li><li>表达式的格式化<br>在这之前必须知道表达式的定义：一条具有明确执行结果的语句<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字符串在python的类型是%s&quot;</span> % <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;字符串&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;1*2的结果是<span class="hljs-subst">&#123;<span class="hljs-number">1</span> * <span class="hljs-number">2</span>&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1*2的结果是%d&quot;</span> % (<span class="hljs-number">1</span> * <span class="hljs-number">2</span>))<br><br><span class="hljs-comment">#可以简洁代码，</span><br></code></pre></td></tr></table></figure>股价计算小程序</li></ul><pre><code class="python">code = input(&quot;请输入股票代码:&quot;)price = input(&quot;请输入需计算价格:&quot;)xishu = input(&quot;请输入增长系数&quot;)day = input(&quot;增长天数&quot;)price = int(price)code = int(code)xishu = float(xishu)day = int(day)now = day*xishu*pricenow = float(now)#其实这里输入变量时可以用code = int(input(&quot;请输入股票代码&quot;))简介代码print(f&quot;股票代码是&#123;code&#125;,当前价格是&#123;now:.2f&#125;&quot;)#&#123;day:.2f&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python的开始（第三章）</title>
    <link href="/2025/10/01/python%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%89/"/>
    <url>/2025/10/01/python%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="布尔类型和比较运算符"><a href="#布尔类型和比较运算符" class="headerlink" title="布尔类型和比较运算符"></a>布尔类型和比较运算符</h1><p>布尔类型不仅可以自行定义，同时也可以通过计算得到，这里的计算即判断运算<br>在python中，布尔运算符有:</p><ul><li>&#x3D;&#x3D; 判断是否相等（a&#x3D;&#x3D;b) 为true</li><li>!&#x3D; 判断内容是否不相等 （a!&#x3D;b)为true</li><li><blockquote><p>&lt;判断大小，与上文相同</p></blockquote></li><li><blockquote><p>&#x3D;,&lt;&#x3D;大于等于，小于等于，与上文相同</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python3">num = 23<br>num1 = 32<br>print(&quot;判断num和num1是否相等&#123;num == num1&#125;&quot;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="if语句的基本格式"><a href="#if语句的基本格式" class="headerlink" title="if语句的基本格式"></a>if语句的基本格式</h2><p>if 要判断的条件:<br>      条件成立时，要做的事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;欢迎来到本游乐园&quot;</span>)<br><span class="hljs-comment">#转换也可以一次完成例如 a = int(input(&quot;请输入你的年龄&quot;))就不用二次转换了</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入你的年龄:&quot;</span>)<br>a = <span class="hljs-built_in">int</span>(a)<br><span class="hljs-keyword">if</span> a &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你已经成年需要补票&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;游玩愉快&quot;</span>)<br></code></pre></td></tr></table></figure><p>elif 是else if的缩写，所以和if一样elif可以有判断条件，多条件判断是，个个条件是互斥的<br>if语句可以简洁输入,优势是不需要输入多余的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1314</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字&quot;</span>)) == a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请再输一次数字&quot;</span>)) == a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确答案是1314&quot;</span>)<br></code></pre></td></tr></table></figure><p>嵌套式判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#and连接，两个条件同时判定</span><br>age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的年龄&quot;</span>))<br>year = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;入职年龄&quot;</span>))<br>level = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入你的等级&quot;</span>))<br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span> <span class="hljs-keyword">and</span> age &gt;= <span class="hljs-number">30</span>:<br>    <span class="hljs-keyword">if</span> year &gt;= <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可以享受五险一金&quot;</span>)<br>    <span class="hljs-keyword">elif</span> level &gt;= <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可以享受五险一金&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不可以享受五险一金&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不可以享受五险一金&quot;</span>)<br></code></pre></td></tr></table></figure><p>他让写一个嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>num = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br>num = <span class="hljs-built_in">int</span>(num)<br>num1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个数字&quot;</span>))<br><span class="hljs-keyword">if</span> num1 == num:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br><span class="hljs-keyword">elif</span> num1 &gt; num:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜大了&quot;</span>)<br>    num3 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;再猜一次&quot;</span>))<br>    <span class="hljs-keyword">if</span> num3 == num:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br>    <span class="hljs-keyword">elif</span> num3 &gt; num:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜大了&quot;</span>)<br>        num4 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;再猜一次&quot;</span>))<br>        <span class="hljs-keyword">if</span> num4 == num:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br>        <span class="hljs-keyword">elif</span> num4 &gt; num:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜大了&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜小了&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜小了&quot;</span>)<br>        num5 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;再猜一次&quot;</span>))<br>        <span class="hljs-keyword">if</span> num5 == num:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br>        <span class="hljs-keyword">elif</span> num5 &gt; num:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜大了&quot;</span>)<br>            <br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜小了&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜小了&quot;</span>)<br>    num2 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;再猜一次&quot;</span>))<br>    <span class="hljs-keyword">if</span> num2 == num:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br>    <span class="hljs-keyword">elif</span> num2 &gt; num:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜大了&quot;</span>)<br>        num6 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;再猜一次&quot;</span>))<br>        <span class="hljs-keyword">if</span> num6 == num:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br>        <span class="hljs-keyword">elif</span> num6 &gt; num:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜大了&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜小了&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜小了&quot;</span>)<br>        num7 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;再猜一次&quot;</span>))<br>        <span class="hljs-keyword">if</span> num7 == num:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜对了&quot;</span>)<br>        <span class="hljs-keyword">elif</span> num7 &gt; num:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜大了&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜小了&quot;</span>) <br></code></pre></td></tr></table></figure><p>超级屎山</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/09/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%883%EF%BC%89/"/>
    <url>/2025/09/23/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C的开始（二）</title>
    <link href="/2025/09/23/C%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%882%EF%BC%89/"/>
    <url>/2025/09/23/C%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><ul><li>二进制转其它进制<br> 首先去看</li></ul><h2 id="字节顺序与存储"><a href="#字节顺序与存储" class="headerlink" title="字节顺序与存储"></a>字节顺序与存储</h2><p>数据类型分为</p><ul><li>整形int （无符号整形 </li><li>字符串char</li><li>浮点数 float</li></ul><ol><li>整形数 <strong>整型数是不包含小数部分的数值，用于表示整数</strong><br>双字节的短整型是由低位字节和高位字节组成的<br>小段次序；先存放低位字节后方高位字节（如X86架构<strong>便于从低位字节向高位字节运算</strong><br>大段次序；和小段次序相反，便于处理字符串</li><li>实型数 <strong>实型数是带有小数部分的数值，用于表示带小数的数值</strong><br>表示方式大可以分为两种</li></ol><ul><li><p>定点形式 可以拆分为小数部分和整数部分 </p><blockquote><p>小数点固定称为定点数 无小数称为定点整数 仅有小数点称为定点小数 他们是特殊类型<br> 定点小数的小数位置位于符号位和最高数值位之间的<br> 定点整数小数点位于数值位的最低位</p></blockquote></li><li><p>浮点形式<br> 浮点数（floating-point）小数点的位置不固定，在逻辑上可以浮动，也可以称为科学计数法，由符号位，阶码，尾数组成<br> 浮点数可以实现小数点可浮动的主要原因是将实数拆成了<strong>阶码（阶码exponent）</strong>和<strong>尾数（小数部分mantissa）</strong>分开存储<br> 表示形式为**$N&#x3D;r^E<em>M$</em>* r为基数一般为2<br> 阶码决定了实数的表述范围 尾数决定实数的表数精度</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C的开始</title>
    <link href="/2025/08/07/C%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <url>/2025/08/07/C%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="C的开始"><a href="#C的开始" class="headerlink" title="C的开始"></a>C的开始</h1><h2 id="既然是开始那么helloword必不可少"><a href="#既然是开始那么helloword必不可少" class="headerlink" title="既然是开始那么helloword必不可少"></a>既然是开始那么helloword必不可少<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello word!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></h2><h2 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h2><ul><li>#include…是头文件，里面有一些函数方便调取，预处理指令</li><li>stdio standard input and output 标准输入输出头文件</li><li>main是主函数，是每个C语言程序所必需的</li><li>printf是一个函数，f指的是format，格式的意思</li><li>（）括号标示了主函数的入口</li><li>{}标示了整个函数的函数体部分</li></ul><hr><h3 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h3><p>变量其存在的意义是确定目标并提供存放的空间<br>在内存中是用唯一的一个十六进制无符号整数来表示地址<br>变量的属性分别为</p><ul><li>变量的地址（address 通常以第一个字节的地址称为变量的地址</li><li>变量的值（value</li><li>变量名 （name</li><li>变量的类型（Type 决定了分配的空间大小<br><strong>变量名需要有规范的，只能是英文字母和数字或者下划线，特殊含义的关键字也不可</strong></li></ul><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    print<br><span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-string">&quot;heloo&quot;</span>)</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上代码不能执行，但是稍加修改就可正常运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    print/<br>f(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使超长代码换行写</p><hr><h5 id="C语言中的数据类型"><a href="#C语言中的数据类型" class="headerlink" title="C语言中的数据类型"></a>C语言中的数据类型</h5><ul><li>char 字符型 占用一个字节</li><li>int 整型，通常反应了所用机器中整数的最自然长度 分为短整型short int（可简称为short）占4个字节，long int（简称long），unsigned无符号整型（正整数和0）</li><li>float 单精度浮点型 单精度实型占4个字节，</li><li>double 双精度浮点型 双精度实型占8个字节<br>数据类型包括基本类型，构造类型，指针类型，空类型<br>其中构造类型中包括数组类型，结构体类型，共用体类型<br>不同的数据类型造成的差异有</li><li>占用内存空间的大小</li><li>数据存储类型</li><li>合法的表数范围</li><li>可参与的运算种类<br>可以用sizeof（）来计算所属类型占用的内存空间字节数，<strong>sizeof()并不是函数而是一个运算符，只在编译时运行，不额外占用运行时间</strong><br><strong>不同数据变量的声明</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> b;<br>    <span class="hljs-type">float</span> c;<br>    <span class="hljs-type">double</span> d;<br>    a = <span class="hljs-number">520</span>;<br>    b = <span class="hljs-string">&#x27;f&#x27;</span>;<br>    c = <span class="hljs-number">3.14</span>;<br>    d = <span class="hljs-number">3.1415926</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;建立于%d\n&quot;</span>,a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I love %c\n&quot;</span>,b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;圆周率是%.2f\n&quot;</span>,c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;精确到后九位的%11.9f\n&quot;</span>,d);<br>&#125;<br></code></pre></td></tr></table></figure>一句变量定义语句可定义多个同类型的变量 <blockquote><p>int a,b,c;</p></blockquote></li></ul><p>这段代码中的占位符比较重要，需要记住</p><blockquote><p>%d，%i代表整数<br>%f代表小数 %.2f代表精确到小数点后两位<br>%c代表着字符</p></blockquote><p><strong>所以就可以说输出的是括号内的内容，引号只是表示字符串</strong></p><p><strong>占位符一般应用printf等函数中</strong></p><hr><p>顺便提一嘴，靠，学了好几个hello word 这次一定好好学 既然做了决定就坚持下去好吗</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
